 
#include <iostream>
#include <fstream>
using namespace std;

int SumDelitel(int a) {
	int sum = 0;
	for (int i = 1; i < a; ++i) {
		if (a % i == 0) {
			sum += i;
		}
	}
	return sum;
}

bool IsFriendNumbers(int a, int b, int s1, int s2) {
	if ((a == s2) and (b == s1)) return true;
	return false;
}



int main()
{
	ifstream f("input.txt");
	int a, b;
	f >> a;
	f >> b;
	f.close();
	bool c = IsFriendNumbers(a, b, SumDelitel(a), SumDelitel(b));
	ofstream f1("output.txt");
	f1 << c;
	f1.close();
	return 0;
}
[20:19, 21.10.2020] Стасенька: это 1 задача
[20:22, 21.10.2020] Стасенька: // Пифагоровы тройки
// взять данные из файла и вывести результат в файл 
#include <iostream>
#include <fstream>
using namespace std;

bool IsTroika(int a, int b, int c) {
    if (a * a + b * b == c * c) {
        return true;
    }
    return false;
}

void Troika(int N, ofstream& f) {
    bool b;
    for (int i = 1; i <= N; ++i) {
        for (int j = i; j <= N; ++j) {
            for (int k = j; k <= N; ++k) {
                b = IsTroika(i, j, k);
                if (b == true) {
                    f << i << " " << j << " " << k << endl;
                }
            }
        }
    }
}

int main()
{
    ifstream f("input.txt");
    int N;
    f >> N;
    f.close();
    ofstream f1("output.txt");
    Troika(N, f1);
    f1.close();
    return 0;
}

2.	Пифагоровы тройки

#include <iostream>
#include <fstream>
using namespace std;

bool IsTroika(int a, int b, int c) {
    if (a * a + b * b == c * c) {
        return true;
    }
    return false;
}

void Troika(int N, ofstream& f) {
    bool b;
    for (int i = 1; i <= N; ++i) {
        for (int j = i; j <= N; ++j) {
            for (int k = j; k <= N; ++k) {
                b = IsTroika(i, j, k);
                if (b == true) {
                    f << i << " " << j << " " << k << endl;
                }
            }
        }
    }
}

int main()
{
    ifstream f("input.txt");
    int N;
    f >> N;
    f.close();
    ofstream f1("output.txt");
    Troika(N, f1);
    f1.close();
    return 0;
}
